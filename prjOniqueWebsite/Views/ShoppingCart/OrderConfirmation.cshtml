@model prjOniqueWebsite.Models.EFModels.Members
@{
    ViewData["Title"] = "訂單確認";
}

<div class="container" data-aos="fade-up">
    <div>
        <div class="status d-flex justify-content-center gap-5 mb-3 py-4 border-bottom border-secondary">
            <div>
                <span class="step">1</span>
                <span>查看購物車</span>
            </div>
            <div>&gt;</div>
            <div class="active">
                <span class="step">2</span>
                <span>訂單確認</span>
            </div>
            <div>&gt;</div>
            <div>
                <span class="step">3</span>
                <span>訂單結算</span>
            </div>
        </div>
    </div>
    <form method="post" action="@Url.Content("~/ShoppingCartApi/CreateOrder")" name="orderForm" id="orderForm">
        <div class="border border-dark-subtle rounded-3 p-2">
            <table class="table table-borderless table-striped align-middle text-center my-0">
                <thead class="table-dark">
                    <tr>
                        <th>商品圖片</th>
                        <th>商品名稱</th>
                        <th>尺寸</th>
                        <th>顏色</th>
                        <th>數量</th>
                        <th>小計</th>
                    </tr>
                </thead>
                <tbody id="tableCartList">
                </tbody>
            </table>
        </div>
        <div class="border border-dark-subtle rounded my-2 p-2">
            <div class="p-2 bg-dark text-white rounded">付款與運送方式</div>
            <div class="p-2 my-2">
                <div class="p-2 d-flex align-items-center">
                    <div class="text-end" style="width: 100px;">付款方式:</div>
                    <div class="mx-3" style="width: 237px">
                        <select class="form-select" id="selelctPayment" name="PaymentMethodId">
                        </select>
                    </div>
                </div>
                <div class="p-2 d-flex align-items-center">
                    <div class="text-end" style="width: 100px;">運送方式:</div>
                    <div class="mx-3" style="width: 237px;">
                        <select class="form-select" id="selectShippingMethod" name="MethodId">
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="border border-dark-subtle rounded my-2 p-2">
            <div class="p-2 bg-dark text-white rounded">
                請填寫收件人資料
            </div>
            <div class="form-check m-3">
                <input class="form-check-input" type="checkbox" id="checkboxSameMemberInfo" name="checkboxSameMemberInfo">
                <label class="form-check-label fw-bold" for="checkboxSameMemberInfo">
                    同會員資料
                </label>
            </div>
            <div class="p-2">
                @*<div class="p-2 d-flex align-items-center">
                <div class="text-end" style="width: 100px;">帳號</div>

                <div class="mx-3">
                <input type="text" value="@Model.Email" class="form-control" readonly />
                </div>
                </div>*@
                <div class="p-2 d-flex align-items-center">
                    <input type="hidden" value="@Model.MemberId" name="MemberId" />
                    <div class="text-end" style="width: 100px;">收件人</div>
                    <div class="mx-3">
                        <input type="text" class="form-control" placeholder="收件人姓名" id="inputName" name="Recipient" />
                        <div for="Recipient" class="Recipient-message text-danger message"></div>
                    </div>
                </div>
                <div class="p-2 d-flex align-items-center">
                    <div class="text-end" style="width: 100px;">電話</div>
                    <div class="mx-3">
                        <input type="text" class="form-control" placeholder="請輸入手機號碼" id="inputPhone" name="RecipientPhone" />
                        <div for="Recipient" class="RecipientPhone-message text-danger message"></div>

                    </div>
                </div>
                <div class="p-2 d-flex align-items-center">
                    <div class="text-end" style="width: 100px;">地址</div>
                    <div class="mx-3">
                        <select class="form-select w-100" id="selectCity" name="City">
                        </select>
                    </div>
                    <div class="mx-3">
                        <select class="form-select w-100" id="selectArea" name="Area">
                        </select>
                    </div>
                    <div class="mx-3" style="width: 500px;">
                        <input type="text" class="form-control" placeholder="收貨地址" id="inputAddress" name="Address" />
                        <div for="Recipient" class="Address-message text-danger message"></div>
                    </div>
                </div>
                <div class="p-2 d-flex">
                    <div class="text-end" style="width: 100px;">備註</div>
                    <div class="form-floating mx-3">
                        <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea"
                                  style="width: 500px ;height:100px;" name="Remark"></textarea>
                        <label for="floatingTextarea" style="font-size: 14px;">請輸入訂單備註，以方便我們提供更好的服務</label>
                    </div>
                </div>

            </div>
        </div>
        <div class="border rounded my-4 border-dark-subtle p-2 ">
            <div class=" p-2 my-2 d-flex">
                <div class=" fw-bold" style="width: 95px;">商品總額: $</div>
                <div class=" text-end" style="width: 95px;" id="divProductsSubTotal"></div>
            </div>
            <div class="p-2 my-2 d-flex justify-content-between">
                <div class="d-flex ">
                    <div class="fw-bold" style="width: 95px;">運送費用: $</div>
                    <div class="text-end " style="width: 95px;" id="divShippingCost"></div>
                </div>
                <div class="d-flex">
                    <div class="fw-bold text-black-50" style="width: 95px;">付款方式</div>
                    <div class="mx-3 text-danger-emphasis fw-bold text-end" style="width: 95px;" id="divPaymentMethod"></div>
                </div>
            </div>
            <div class="p-2 my-2 d-flex justify-content-between align-items-center">
                <div class="d-flex ">
                    <div class="fw-bold lh-lg" style="width: 95px;">應付總額: $</div>
                    <div class="text-end text-danger fw-bold fs-5 " style="width: 95px;" id="divAmountOfOrder"></div>
                </div>
                <div class="d-flex">
                    <div class="fw-bold text-black-50" style="width: 95px;">運送方式</div>
                    <div class="mx-3 text-danger-emphasis fw-bold text-end" style="width: 95px;" id="divShippingMethod"></div>
                </div>
            </div>
        </div>
        <div class="p-2 mb-4 text-center">
            <input type="button" value="返回購物車" class="btn btn-outline-dark" style="width: 150px;" />
            <input type="submit" id="btnSubmit" value="提交訂單" class="btn btn-dark" style="width: 150px;" />
        </div>
    </form>
</div>

@section Scripts{
    <script>
        const tableCartList = document.querySelector('#tableCartList');
        const form = document.querySelector("form");

        let isCheck = false
        let memberArea = 0;
        let shippingMethod = ""
        let payment = ""
        let quantumOfOutput = 0;
        let shippingCost = 0;
        let amountOfOrder = 0;

        DisplayCartList();
        DisplayPaymentMethods();
        LoadCity()

        async function DisplayCartList() {
            const response = await fetch(`@Url.Content("~/ShoppingCartApi/CartItems")`);
            const datas = await response.json();

            const cartList = datas.map(item => {
                const { photoPath, product, productSizes, productColors, shoppingCart } = item;

                let subTotal = product.price * shoppingCart.orderQuantity;
                quantumOfOutput += subTotal;

                return (`<tr class="border">
                                    <td class="w-90-h-90">
                                        <img src="@Url.Content("~/images/uploads/products/")${photoPath}" alt="${product.productName}" class="w-90-h-90 rounded">
                                    </td>
                                    <td>
                                        ${product.productName}
                                    </td>
                                    <td>${productSizes.sizeName}</td>
                                    <td>${productColors.colorName}</td>
                                    <td>${shoppingCart.orderQuantity}</td>
                                    <td>
                                        <div class="price">
                                            ${subTotal}
                                        </div>
                                    </td>
                                </tr>`)
            })
            tableCartList.innerHTML = cartList.join("");
            $('#divProductsSubTotal').text(quantumOfOutput);
            DisplayShippingMethod();
        }

        async function DisplayShippingMethod() {
            const response = await fetch(`@Url.Content("~/ShoppingCartApi/DisplayShippingMethod")`);
            const datas = await response.json();

            const shippingMethods = datas.map(item => {
                const { methodId, methodName } = item;

                return `<option value="${methodId}">${methodName}</option>`
            })

            $('#selectShippingMethod').html(shippingMethods.join(""));
            shippingMethod = $('#selectShippingMethod').find("option:selected").text();
            UpdateShippingCost(shippingMethod)
        }

        async function DisplayPaymentMethods() {
            const response = await fetch(`@Url.Content("~/ShoppingCartApi/DisplayPaymentMethods")`);
            const datas = await response.json();

            const paymentMethods = datas.map(item => {
                const { paymentMethodId, paymentMethodName } = item;

                return `<option value="${paymentMethodId}">${paymentMethodName}</option>`
            })

            $('#selelctPayment').html(paymentMethods.join(""));
            payment = $('#selelctPayment').find("option:selected").text();
            $('#divPaymentMethod').text(payment)
        }

        async function LoadCity() {
            const response = await fetch(`@Url.Content("~/MemberApi/LoadCity")`)
            const datas = await response.json()

            const citys = datas.map(item => {
                const { cityId, cityName } = item;

                return `<option value="${cityId}">${cityName}</option>`
            })
            $('#selectCity').html(citys.join(""));
            LoadArea()
        }

        async function LoadArea() {
            const cityId = $('#selectCity').val();
            const response = await fetch(`@Url.Content("~/MemberApi/LoadArea")?cityId=${cityId}`)
            const datas = await response.json()

            const area = datas.map(item => {
                const { areaId, areaName } = item;

                return `<option value="${areaId}">${areaName}</option>`
            })
            $('#selectArea').html(area.join(""));
            selectedMemberArea(isCheck, memberArea)
        }

        function selectedMemberArea(isCheck, memberArea) {
            if (isCheck) {
                $('#selectArea').val(memberArea)
                memberArea = 1;
            }
        }

        async function SameMemberInfo() {
            const response = await fetch(`@Url.Content("~/ShoppingCartApi/GetMemberInfo")`)
            const datas = await response.json()

            const { areaId, name, phone, cityId, address } = datas;
            memberArea = areaId
            $('#inputName').val(name)
            $('#inputPhone').val(phone)
            $('#selectCity').val(cityId)
            LoadArea()
            $('#inputAddress').val(address)
        }

        $('#checkboxSameMemberInfo').change(function () {
            isCheck = $(this).is(':checked')
            if (isCheck) {
                SameMemberInfo()
            }
            else {
                $('#inputName').val("")
                $('#inputPhone').val("")
                $('#selectCity').val(1)
                LoadArea()
                $('#inputAddress').val("")
            }
        })

        $("#selectCity").change(function () {
            LoadArea()
        })

        $('#selectShippingMethod').change(function () {
            shippingMethod = $(this).find("option:selected").text();
            UpdateShippingCost(shippingMethod)
        })

        $('#selelctPayment').change(function () {
            payment = $('#selelctPayment').find("option:selected").text();
            $('#divPaymentMethod').text(payment)
        })

        function UpdateShippingCost(shippingMethod) {
            $('#divShippingMethod').text(shippingMethod)
            if (shippingMethod == "宅配") {
                shippingCost = 100;
            }
            else if (shippingMethod == "郵寄") {
                shippingCost = 120
            }
            else {
                shippingCost = 60
            }
            $('#divShippingCost').text(shippingCost)
            UpdateAmountOfOrder()
        }

        function UpdateAmountOfOrder() {
            amountOfOrder = quantumOfOutput + shippingCost;
            $('#divAmountOfOrder').text(amountOfOrder)
        }

        $('#btnSubmit').click(async function (event) {
            event.preventDefault();
            let isValid = checkValue();
            console.log(isValid)
            //const formData = new FormData(document.orderForm);

            //const response = await fetch('@Url.Content("~/ShoppingCartApi/CreateOrder")',{
            //    body: formData,
            //    method:'POST'
            //});

            //const datas = response.text();

        })

        let constraints = {
            "Recipient": {
                presence: {
                    message: "^收件人是必填的欄位!"
                }
            },
            "RecipientPhone": {
                presence: {
                    message: "^電話是必填的欄位!",

                }, 
                length: {
                    minimum: 9, // 輸入值不能短於此值
                    maximum: 11, // 輸入值不能長於此值
                    message: "^電話長度需10碼!"
                },
                numericality:{
                    message:"^請輸入數字!"
                }

            },
            "Address":{
                presence:{
                    message: "^請填寫詳細住址!",
                }
            }
        }

        $("input").focus(function () {
            cleanMessage()
        })

        function checkValue() {
            const result = validate(form, constraints);
            cleanMessage();
            if (result) {
                setMessage(result);
                return false
            }else{
                return true
            }
        } 
        function setMessage(result) {
            let message;
            let nameList = Object.keys(result);
            nameList.forEach((name) => {
                message = document.querySelector(`.${name}-message`);
                message.innerHTML = result[name];
            });
        }

        function cleanMessage() {
            let message = document.querySelectorAll('.message')
            message.forEach((label) => {
                label.innerHTML = ''
            });
        }
    </script>
}
@section Styles{
    <link href="~/css/shoppingcart.css" rel="stylesheet" />
    <style>
        .price::before {
            content: "$";
        }
    </style>
}